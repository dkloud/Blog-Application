// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190122205336_Initial_Create")]
    partial class Initial_Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogApp.BlogModels.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("BlogApp.BlogModels.BlogArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<byte[]>("Image");

                    b.Property<string>("ImageContentType");

                    b.Property<string>("Name");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("BlogApp.BlogModels.Commentary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogArticleId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Text");

                    b.Property<int?>("UserId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("BlogArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Commentaries");
                });

            modelBuilder.Entity("BlogApp.BlogModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogArticleId");

                    b.Property<int>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BlogArticleId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("BlogApp.UserModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("RoleType");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, RoleType = "admin" },
                        new { Id = 2, RoleType = "user" }
                    );
                });

            modelBuilder.Entity("BlogApp.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password");

                    b.Property<int?>("RoleId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Login");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Login = "admin", Password = "admin1", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("BlogApp.BlogModels.Blog", b =>
                {
                    b.HasOne("BlogApp.UserModels.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogApp.BlogModels.BlogArticle", b =>
                {
                    b.HasOne("BlogApp.BlogModels.Blog", "Blog")
                        .WithMany("Articles")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogApp.BlogModels.Commentary", b =>
                {
                    b.HasOne("BlogApp.BlogModels.BlogArticle", "BlogArticle")
                        .WithMany("Commentaries")
                        .HasForeignKey("BlogArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BlogApp.UserModels.User")
                        .WithMany("Commentaries")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BlogApp.BlogModels.Tag", b =>
                {
                    b.HasOne("BlogApp.BlogModels.BlogArticle", "BlogArticle")
                        .WithMany("Tags")
                        .HasForeignKey("BlogArticleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BlogApp.UserModels.User", b =>
                {
                    b.HasOne("BlogApp.UserModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
